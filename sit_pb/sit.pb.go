// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sit.proto

/*
Package sit_pb is a generated protocol buffer package.

It is generated from these files:
	sit.proto

It has these top-level messages:
	Point
	Site
	Span
	Access
	Address
	Equipment
	Equipment_Install
	Place
	Person
	Company
*/
package sit_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A geographical point on NZGD2000
type Point struct {
	// Latitude - geographical latitude of the point.
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude - geographical longitude of the point.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	// Elevation - geographical height of the point.
	Elevation float64 `protobuf:"fixed64,3,opt,name=elevation" json:"elevation,omitempty"`
	// Datum
	Datum string `protobuf:"bytes,4,opt,name=datum" json:"datum,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Point) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Point) GetElevation() float64 {
	if m != nil {
		return m.Elevation
	}
	return 0
}

func (m *Point) GetDatum() string {
	if m != nil {
		return m.Datum
	}
	return ""
}

// A site record (represents a seismic site OR gps mark)
type Site struct {
	Code   string  `protobuf:"bytes,1,opt,name=Code" json:"Code,omitempty"`
	Access *Access `protobuf:"bytes,2,opt,name=access" json:"access,omitempty"`
	// Address address = 3;
	EquipmentInstalls []*Equipment_Install `protobuf:"bytes,4,rep,name=equipment_installs,json=equipmentInstalls" json:"equipment_installs,omitempty"`
	Place             *Place               `protobuf:"bytes,5,opt,name=place" json:"place,omitempty"`
	People            []*Person            `protobuf:"bytes,6,rep,name=people" json:"people,omitempty"`
	Company           []*Company           `protobuf:"bytes,7,rep,name=company" json:"company,omitempty"`
}

func (m *Site) Reset()                    { *m = Site{} }
func (m *Site) String() string            { return proto.CompactTextString(m) }
func (*Site) ProtoMessage()               {}
func (*Site) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Site) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Site) GetAccess() *Access {
	if m != nil {
		return m.Access
	}
	return nil
}

func (m *Site) GetEquipmentInstalls() []*Equipment_Install {
	if m != nil {
		return m.EquipmentInstalls
	}
	return nil
}

func (m *Site) GetPlace() *Place {
	if m != nil {
		return m.Place
	}
	return nil
}

func (m *Site) GetPeople() []*Person {
	if m != nil {
		return m.People
	}
	return nil
}

func (m *Site) GetCompany() []*Company {
	if m != nil {
		return m.Company
	}
	return nil
}

// A time span that has a start and and end.
type Span struct {
	// Start - time in Unix seconds.
	Start int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	// End - time in Unix seconds.  A future date of 9999-01-01T00:00:00Z is used to indicate still open.
	End int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Span) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Span) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

// An access record - access.csv
type Access struct {
	Description string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Notes       string `protobuf:"bytes,2,opt,name=notes" json:"notes,omitempty"`
	// Only contains company, address1-3 and city
	Address *Address `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *Access) Reset()                    { *m = Access{} }
func (m *Access) String() string            { return proto.CompactTextString(m) }
func (*Access) ProtoMessage()               {}
func (*Access) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Access) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Access) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Access) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// An address record - address.csv
type Address struct {
	Company  string `protobuf:"bytes,1,opt,name=company" json:"company,omitempty"`
	Address1 string `protobuf:"bytes,2,opt,name=address1" json:"address1,omitempty"`
	Address2 string `protobuf:"bytes,3,opt,name=address2" json:"address2,omitempty"`
	Address3 string `protobuf:"bytes,4,opt,name=address3" json:"address3,omitempty"`
	City     string `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	State    string `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	Postcode string `protobuf:"bytes,7,opt,name=postcode" json:"postcode,omitempty"`
	Country  string `protobuf:"bytes,8,opt,name=country" json:"country,omitempty"`
	PoBox    string `protobuf:"bytes,9,opt,name=po_box,json=poBox" json:"po_box,omitempty"`
	Type     string `protobuf:"bytes,10,opt,name=type" json:"type,omitempty"`
	Notes    string `protobuf:"bytes,11,opt,name=notes" json:"notes,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Address) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Address) GetAddress1() string {
	if m != nil {
		return m.Address1
	}
	return ""
}

func (m *Address) GetAddress2() string {
	if m != nil {
		return m.Address2
	}
	return ""
}

func (m *Address) GetAddress3() string {
	if m != nil {
		return m.Address3
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetPostcode() string {
	if m != nil {
		return m.Postcode
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Address) GetPoBox() string {
	if m != nil {
		return m.PoBox
	}
	return ""
}

func (m *Address) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Address) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

// An equipment record - equipment.csv
type Equipment struct {
	AssetNumber  string `protobuf:"bytes,1,opt,name=asset_number,json=assetNumber" json:"asset_number,omitempty"`
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Manufacturer string `protobuf:"bytes,3,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Model        string `protobuf:"bytes,4,opt,name=model" json:"model,omitempty"`
	Type         string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Owner        string `protobuf:"bytes,6,opt,name=owner" json:"owner,omitempty"`
}

func (m *Equipment) Reset()                    { *m = Equipment{} }
func (m *Equipment) String() string            { return proto.CompactTextString(m) }
func (*Equipment) ProtoMessage()               {}
func (*Equipment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Equipment) GetAssetNumber() string {
	if m != nil {
		return m.AssetNumber
	}
	return ""
}

func (m *Equipment) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Equipment) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Equipment) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Equipment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Equipment) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// An equipment install record - equipment_installs.csv
type Equipment_Install struct {
	Equipment *Equipment `protobuf:"bytes,1,opt,name=equipment" json:"equipment,omitempty"`
	Installed *Span      `protobuf:"bytes,2,opt,name=installed" json:"installed,omitempty"`
}

func (m *Equipment_Install) Reset()                    { *m = Equipment_Install{} }
func (m *Equipment_Install) String() string            { return proto.CompactTextString(m) }
func (*Equipment_Install) ProtoMessage()               {}
func (*Equipment_Install) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Equipment_Install) GetEquipment() *Equipment {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *Equipment_Install) GetInstalled() *Span {
	if m != nil {
		return m.Installed
	}
	return nil
}

// A place record - place.csv
type Place struct {
	Name                  string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	LongName              string   `protobuf:"bytes,2,opt,name=long_name,json=longName" json:"long_name,omitempty"`
	Point                 *Point   `protobuf:"bytes,3,opt,name=point" json:"point,omitempty"`
	Text                  string   `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	Type                  string   `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	EstablishedBy         string   `protobuf:"bytes,6,opt,name=established_by,json=establishedBy" json:"established_by,omitempty"`
	DateEstablished       int64    `protobuf:"varint,7,opt,name=date_established,json=dateEstablished" json:"date_established,omitempty"`
	Description           string   `protobuf:"bytes,8,opt,name=description" json:"description,omitempty"`
	ProtectionDescription string   `protobuf:"bytes,9,opt,name=protection_description,json=protectionDescription" json:"protection_description,omitempty"`
	Notes                 string   `protobuf:"bytes,10,opt,name=notes" json:"notes,omitempty"`
	CellCoverage          string   `protobuf:"bytes,11,opt,name=cell_coverage,json=cellCoverage" json:"cell_coverage,omitempty"`
	Address               *Address `protobuf:"bytes,12,opt,name=address" json:"address,omitempty"`
}

func (m *Place) Reset()                    { *m = Place{} }
func (m *Place) String() string            { return proto.CompactTextString(m) }
func (*Place) ProtoMessage()               {}
func (*Place) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Place) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Place) GetLongName() string {
	if m != nil {
		return m.LongName
	}
	return ""
}

func (m *Place) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *Place) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Place) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Place) GetEstablishedBy() string {
	if m != nil {
		return m.EstablishedBy
	}
	return ""
}

func (m *Place) GetDateEstablished() int64 {
	if m != nil {
		return m.DateEstablished
	}
	return 0
}

func (m *Place) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Place) GetProtectionDescription() string {
	if m != nil {
		return m.ProtectionDescription
	}
	return ""
}

func (m *Place) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Place) GetCellCoverage() string {
	if m != nil {
		return m.CellCoverage
	}
	return ""
}

func (m *Place) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// A person record - place_person.csv
type Person struct {
	Place            string     `protobuf:"bytes,1,opt,name=place" json:"place,omitempty"`
	Surname          string     `protobuf:"bytes,2,opt,name=surname" json:"surname,omitempty"`
	FirstName        string     `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	Initial          string     `protobuf:"bytes,4,opt,name=initial" json:"initial,omitempty"`
	Email            string     `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	Suffix           string     `protobuf:"bytes,6,opt,name=suffix" json:"suffix,omitempty"`
	Title            string     `protobuf:"bytes,7,opt,name=title" json:"title,omitempty"`
	PreferredContact string     `protobuf:"bytes,8,opt,name=preferred_contact,json=preferredContact" json:"preferred_contact,omitempty"`
	Phone            string     `protobuf:"bytes,9,opt,name=phone" json:"phone,omitempty"`
	Notes            string     `protobuf:"bytes,10,opt,name=notes" json:"notes,omitempty"`
	Type             string     `protobuf:"bytes,11,opt,name=type" json:"type,omitempty"`
	Address          []*Address `protobuf:"bytes,12,rep,name=address" json:"address,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Person) GetPlace() string {
	if m != nil {
		return m.Place
	}
	return ""
}

func (m *Person) GetSurname() string {
	if m != nil {
		return m.Surname
	}
	return ""
}

func (m *Person) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Person) GetInitial() string {
	if m != nil {
		return m.Initial
	}
	return ""
}

func (m *Person) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Person) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *Person) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Person) GetPreferredContact() string {
	if m != nil {
		return m.PreferredContact
	}
	return ""
}

func (m *Person) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Person) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Person) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Person) GetAddress() []*Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type Company struct {
	Name    string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Phone   string     `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
	Address []*Address `protobuf:"bytes,3,rep,name=address" json:"address,omitempty"`
}

func (m *Company) Reset()                    { *m = Company{} }
func (m *Company) String() string            { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()               {}
func (*Company) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Company) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Company) GetAddress() []*Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func init() {
	proto.RegisterType((*Point)(nil), "sit.Point")
	proto.RegisterType((*Site)(nil), "sit.site")
	proto.RegisterType((*Span)(nil), "sit.Span")
	proto.RegisterType((*Access)(nil), "sit.Access")
	proto.RegisterType((*Address)(nil), "sit.Address")
	proto.RegisterType((*Equipment)(nil), "sit.Equipment")
	proto.RegisterType((*Equipment_Install)(nil), "sit.Equipment_Install")
	proto.RegisterType((*Place)(nil), "sit.Place")
	proto.RegisterType((*Person)(nil), "sit.Person")
	proto.RegisterType((*Company)(nil), "sit.Company")
}

func init() { proto.RegisterFile("sit.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 851 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xdd, 0x6e, 0xe4, 0x34,
	0x14, 0xd6, 0x34, 0xf3, 0xd3, 0x9c, 0x99, 0x2e, 0xad, 0xc5, 0x56, 0x11, 0x3f, 0xd2, 0x90, 0x0a,
	0x28, 0x02, 0x55, 0x62, 0x56, 0x3c, 0xc0, 0xb6, 0xf4, 0x82, 0x9b, 0x55, 0x65, 0xee, 0xe0, 0x22,
	0xf2, 0x24, 0x67, 0xb6, 0x46, 0x19, 0x3b, 0xd8, 0xce, 0x32, 0xf3, 0x16, 0x5c, 0xf2, 0x26, 0xbc,
	0x03, 0xef, 0xc3, 0x3d, 0xf2, 0xb1, 0x93, 0xc9, 0xb0, 0xed, 0xde, 0xf9, 0xfb, 0x3e, 0xc7, 0x3e,
	0xfe, 0x7c, 0x3e, 0x07, 0x52, 0x2b, 0xdd, 0x4d, 0x63, 0xb4, 0xd3, 0x2c, 0xb1, 0xd2, 0xe5, 0x2d,
	0x4c, 0x1e, 0xb4, 0x54, 0x8e, 0x7d, 0x02, 0xa7, 0xb5, 0x70, 0xd2, 0xb5, 0x15, 0x66, 0xa3, 0xe5,
	0xe8, 0x7a, 0xc4, 0x7b, 0xcc, 0x3e, 0x83, 0xb4, 0xd6, 0xea, 0x6d, 0x10, 0x4f, 0x48, 0x3c, 0x10,
	0x5e, 0xc5, 0x1a, 0xdf, 0x09, 0x27, 0xb5, 0xca, 0x92, 0xa0, 0xf6, 0x04, 0xfb, 0x18, 0x26, 0x95,
	0x70, 0xed, 0x36, 0x1b, 0x2f, 0x47, 0xd7, 0x29, 0x0f, 0x20, 0xff, 0x77, 0x04, 0x63, 0x2b, 0x1d,
	0x32, 0x06, 0xe3, 0x3b, 0x1d, 0xb7, 0x4c, 0x39, 0x8d, 0xd9, 0x15, 0x4c, 0x45, 0x59, 0xa2, 0xb5,
	0xb4, 0xd7, 0x7c, 0x35, 0xbf, 0xf1, 0x45, 0xbf, 0x26, 0x8a, 0x47, 0x89, 0xdd, 0x03, 0xc3, 0xdf,
	0x5b, 0xd9, 0x6c, 0x51, 0xb9, 0x42, 0x2a, 0xeb, 0x44, 0x5d, 0xdb, 0x6c, 0xbc, 0x4c, 0xae, 0xe7,
	0xab, 0x4b, 0xfa, 0xe0, 0xbe, 0x97, 0x7f, 0x0a, 0x32, 0xbf, 0xe8, 0xbf, 0x88, 0x8c, 0x65, 0x4b,
	0x98, 0x34, 0xb5, 0x28, 0x31, 0x9b, 0xd0, 0x56, 0x40, 0x5f, 0x3e, 0x78, 0x86, 0x07, 0xc1, 0x57,
	0xd3, 0xa0, 0x6e, 0x6a, 0xcc, 0xa6, 0xb4, 0x78, 0xa8, 0xe6, 0x01, 0x8d, 0xd5, 0x8a, 0x47, 0x89,
	0x7d, 0x05, 0xb3, 0x52, 0x6f, 0x1b, 0xa1, 0xf6, 0xd9, 0x8c, 0x66, 0x2d, 0x68, 0xd6, 0x5d, 0xe0,
	0x78, 0x27, 0xe6, 0x37, 0x30, 0xfe, 0xb9, 0x11, 0xe4, 0x8a, 0x75, 0xc2, 0x38, 0x3a, 0x77, 0xc2,
	0x03, 0x60, 0xe7, 0x90, 0xa0, 0xaa, 0xe8, 0xd4, 0x09, 0xf7, 0xc3, 0xfc, 0x11, 0xa6, 0xe1, 0xdc,
	0x6c, 0x09, 0xf3, 0x0a, 0x6d, 0x69, 0x64, 0x43, 0x3e, 0x07, 0xbf, 0x86, 0x94, 0x5f, 0x53, 0x69,
	0x87, 0xc1, 0xb5, 0x94, 0x07, 0xe0, 0x2b, 0x13, 0x55, 0x65, 0xbc, 0x9b, 0x09, 0x1d, 0x31, 0x54,
	0xf6, 0x3a, 0x70, 0xbc, 0x13, 0xf3, 0xbf, 0x4e, 0x60, 0x16, 0x49, 0x96, 0x1d, 0x4e, 0x13, 0xf6,
	0xe9, 0xa0, 0xef, 0x92, 0xf8, 0xc1, 0xf7, 0x71, 0x9b, 0x1e, 0x0f, 0xb4, 0x15, 0x6d, 0x75, 0xd0,
	0x56, 0x03, 0xed, 0x55, 0x6c, 0x84, 0x1e, 0xfb, 0x16, 0x28, 0xa5, 0xdb, 0xd3, 0x0d, 0xa4, 0x9c,
	0xc6, 0xd1, 0x1f, 0xe7, 0x3d, 0xa7, 0xb3, 0x10, 0xf0, 0xab, 0x34, 0xda, 0xba, 0xd2, 0x37, 0xcc,
	0x2c, 0xac, 0xd2, 0xe1, 0x50, 0x73, 0xab, 0x9c, 0xd9, 0x67, 0xa7, 0x5d, 0xcd, 0x04, 0xd9, 0x4b,
	0x98, 0x36, 0xba, 0x58, 0xeb, 0x5d, 0x96, 0x86, 0xc5, 0x1a, 0x7d, 0xab, 0x77, 0x7e, 0x5b, 0xb7,
	0x6f, 0x30, 0x83, 0xb0, 0xad, 0x1f, 0x1f, 0x2c, 0x9c, 0x0f, 0x2c, 0xcc, 0xff, 0x1e, 0x41, 0xda,
	0x37, 0x13, 0xfb, 0x02, 0x16, 0xc2, 0x5a, 0x74, 0x85, 0x6a, 0xb7, 0x6b, 0x34, 0xdd, 0x4d, 0x10,
	0xf7, 0x86, 0x28, 0x76, 0x05, 0x67, 0x16, 0x8d, 0x14, 0x75, 0x37, 0x27, 0x58, 0xb5, 0x08, 0x64,
	0x9c, 0x94, 0xc3, 0x62, 0x2b, 0x54, 0xbb, 0x11, 0xa5, 0x6b, 0x0d, 0x9a, 0x68, 0xd9, 0x11, 0xe7,
	0xeb, 0xd9, 0xea, 0x0a, 0xeb, 0x2e, 0x3c, 0x04, 0xfa, 0xca, 0x27, 0xc7, 0x95, 0xeb, 0x3f, 0x14,
	0x9a, 0xce, 0x30, 0x02, 0xf9, 0x6f, 0x70, 0xf1, 0x5e, 0x0a, 0xd8, 0x77, 0x90, 0xf6, 0x39, 0xa0,
	0xea, 0xe7, 0xab, 0x17, 0xc7, 0x81, 0xe1, 0x87, 0x09, 0xec, 0x6b, 0x48, 0x63, 0xba, 0xb0, 0x8a,
	0x79, 0x4c, 0x69, 0xb6, 0xef, 0x63, 0x7e, 0xd0, 0xf2, 0x3f, 0x13, 0x98, 0x50, 0x70, 0x7c, 0x7d,
	0x4a, 0x6c, 0xfb, 0x4c, 0xfb, 0x31, 0xfb, 0x34, 0x3c, 0x21, 0x05, 0x09, 0xb1, 0x73, 0x3c, 0xf1,
	0xc6, 0x8b, 0x3e, 0x84, 0xfe, 0x11, 0x8a, 0x1d, 0x1a, 0x43, 0xe8, 0x19, 0x1e, 0x04, 0x3a, 0x32,
	0xee, 0x5c, 0xf4, 0x81, 0xc6, 0x4f, 0xda, 0xf0, 0x25, 0xbc, 0x40, 0xeb, 0xc4, 0xba, 0x96, 0xf6,
	0x11, 0xab, 0x62, 0xbd, 0x8f, 0x7e, 0x9c, 0x0d, 0xd8, 0xdb, 0x3d, 0xfb, 0x06, 0xce, 0x2b, 0xe1,
	0xb0, 0x18, 0xb0, 0xd4, 0x50, 0x09, 0xff, 0xc8, 0xf3, 0xf7, 0x07, 0xfa, 0xff, 0xb9, 0x3b, 0x7d,
	0x3f, 0x77, 0x3f, 0xc0, 0xa5, 0x7f, 0x50, 0xb1, 0xf4, 0xa8, 0x18, 0x4e, 0x0e, 0xfd, 0xf6, 0xf2,
	0xa0, 0xfe, 0xf8, 0x54, 0x5c, 0x61, 0x18, 0xd7, 0x2b, 0x38, 0x2b, 0xb1, 0xae, 0x8b, 0x52, 0xbf,
	0x43, 0x23, 0xde, 0x62, 0xec, 0xc4, 0x85, 0x27, 0xef, 0x22, 0x37, 0xcc, 0xf4, 0xe2, 0x43, 0x99,
	0xfe, 0xe7, 0x04, 0xa6, 0xe1, 0xa1, 0xf2, 0xbb, 0x85, 0x77, 0x6e, 0x14, 0x33, 0x40, 0x37, 0x95,
	0xc1, 0xcc, 0xb6, 0x66, 0x70, 0x27, 0x1d, 0x64, 0x9f, 0x03, 0x6c, 0xa4, 0xb1, 0x2e, 0x5c, 0x58,
	0xe8, 0xcd, 0x94, 0x18, 0xba, 0xb1, 0x0c, 0x66, 0x52, 0x49, 0x27, 0x45, 0xd7, 0x9a, 0x1d, 0xf4,
	0x1b, 0xe1, 0x56, 0xc8, 0x3a, 0x5e, 0x4b, 0x00, 0xec, 0x12, 0xa6, 0xb6, 0xdd, 0x6c, 0xe4, 0x2e,
	0xde, 0x47, 0x44, 0x7e, 0xb6, 0x93, 0xae, 0xee, 0xe2, 0x1c, 0x00, 0xfb, 0x16, 0x2e, 0x1a, 0x83,
	0x1b, 0x34, 0x06, 0xab, 0xa2, 0xd4, 0xca, 0x89, 0xd2, 0x45, 0xe7, 0xcf, 0x7b, 0xe1, 0x2e, 0xf0,
	0x74, 0xb2, 0x47, 0xad, 0xb0, 0x4f, 0xb7, 0x07, 0xcf, 0xb8, 0xdb, 0xb5, 0xcc, 0x7c, 0xd0, 0x32,
	0x47, 0x66, 0x26, 0xcf, 0x9b, 0xf9, 0x2b, 0xcc, 0xe2, 0x73, 0xfe, 0x64, 0x83, 0xf7, 0x65, 0x9c,
	0x0c, 0xcb, 0x38, 0x7a, 0x7d, 0x9f, 0x5f, 0xfc, 0xf6, 0xf4, 0x97, 0xa9, 0x95, 0xae, 0x68, 0xd6,
	0xeb, 0x29, 0xfd, 0x9c, 0x5f, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x9f, 0x92, 0xb3, 0xa9,
	0x07, 0x00, 0x00,
}
